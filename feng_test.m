% 清空工作空间和命令窗口
clc;
clear;

%% 决策变量初始化
% 定义优化问题中的决策变量（连续变量和二进制变量）
P_DG = sdpvar(1,24); % 风电消纳功率（24小时）
P_PV = sdpvar(1,24); % 光伏消纳功率（24小时）
P_PEM_E = sdpvar(1,24); % PEM电解槽的用电功率（24小时）
P_PEM_H2 = sdpvar(1,24); % PEM电解槽的产氢功率（24小时）
I = binvar(1,24); % 停机状态二进制变量（1表示停机，0表示非停机）
S = binvar(1,24); % 冷待机状态二进制变量
L = binvar(1,24); % 变载运行状态二进制变量
R = binvar(1,24); % 过载运行状态二进制变量
V = binvar(1,24); % 低载运行状态二进制变量
Y = binvar(1,24); % 启动间隔标志变量
W = binvar(1,24); % 制氢惩罚标志变量

%% 导入常数参数
% 负荷参数 - 电负荷数据（经过0.5*1.6系数修正）
Pload=1.6*[252.25 250.75 256.25 256.75 256 277 301.25 324.5 331 356.25 375.25 399.5 406 422.25 426 413.5 386.5 375 355.75 324.5 301 275 255.75 249.5];
% 氢负荷数据
Hload = [244.5 247.5 228 243.5 256.6 262 278 300.5 311 337.5 334.5 361.5 372.5 356 349 336 300 294 277 264.5 256 251.5 249.5 244];
% 风电预测出力数据
P_DG_max = [574.4 580.8 788.8 895.2 974.4 1091.2 834.4 534.4 647.2 696.8 880 900 914.4 1075.2 902.4 833.6 842.4 774.4 716 573.6 692 655.2 666.4 624.4];
% 光伏预测出力数据
P_PV_max = [0 0 0 0 0 0.4 100 214.4 276 364.8 444 471.2 523.2 569.6 550.4 500 453.6 334.4 204 0 0 0 0 0];

%% 系统参数定义
T = 24; % 时间周期（24小时）
P_PEM_max = 300; % PEM电解槽最大功率（kW）
P_PEM_b = 8; % PEM电解槽待机功率（kW）
e = 0.9;  % 制氢效率（90%）

%% 初始化目标函数和约束
Cost = 0; % 目标函数初始化
C = []; % 约束条件集合初始化

%% PEM电解槽运行约束
% 电氢转换关系：产氢功率 = 效率 * (用电功率 - 待机功率*待机状态)
C = C+[P_PEM_H2 == e.*(P_PEM_E-P_PEM_b*S)]; 

% PEM功率下限约束：各运行状态下最小功率要求
C = C+[P_PEM_b*S + 0.1*P_PEM_max*L + P_PEM_max*R+0.2*P_PEM_max*V<=P_PEM_E ];

% PEM功率上限约束：各运行状态下最大功率限制
C = C+[P_PEM_E <= P_PEM_b*S + P_PEM_max*L + 1.2*P_PEM_max*R + 0.3*P_PEM_max*V];

% 停机时间约束：确保停机时间不少于3小时
C = C+[-I(:,1:T-2)+I(:,2:T-1)-I(:,3:T)<=0]; 

% 状态互斥约束：每个时刻只能处于一种运行状态
C = C+[L+S+I+R+V == 1];  

% 启停间隔约束：确保启停操作满足时间间隔要求
C = C+[V(:,2:T)+R(:,2:T)+L(:,2:T)+S(:,2:T)+I(:,1:T-1)<=Y(:,2:T)];

% 制氢惩罚约束：避免频繁启停对制氢的影响
C = C+[W(:,2:T)<=S(:,1:T-1)];
C = C+[W<=L+R+V];
C = C+[W(:,2:T)>=S(:,1:T-1)+L(:,2:T)+R(:,2:T)+V(:,2:T)-1];

% 过载运行时间限制：连续过载不超过2小时
for i = 1:T-2
    C = C+[R(:,i)+R(:,i+1)+R(:,i+2)<=2];
end

% 低载运行时间限制：连续低载不超过2小时
for i = 1:T-2
    C=C+[V(:,i)+V(:,i+1)+V(:,i+2)<=2];
end

% PEM总产氢量和总耗电量计算
P_PEM_H2_N = sum(P_PEM_H2);
P_PEM_E_N = sum(P_PEM_E);

%% 风光发电约束
C = [C,
    0<=P_DG<=P_DG_max,    % 风电出力约束：0到最大预测出力
    0<=P_PV<=P_PV_max,    % 光伏出力约束：0到最大预测出力
    ];

%% 电储能系统约束
Ubat = 1000; % 电池储能容量（kWh）
P_ES1_cha = sdpvar(1,24);  % 储能充电功率（24小时）
P_ES1_dis = sdpvar(1,24);  % 储能放电功率（24小时）
S_1 = sdpvar(1,24); % 储能实时容量状态（24小时）

% 储能充放电标志二进制变量
B_ES1_cha = binvar(1,24); % 充电标志（1充电，0不充电）
B_ES1_dis = binvar(1,24); % 放电标志（1放电，0不放电）

C = [C,
    0<=P_ES1_cha<=B_ES1_cha*0.5*Ubat, % 储电设备的最大充电功率约束（不超过容量的50%）
    0<=P_ES1_dis<=B_ES1_dis*0.5*Ubat, % 储电设备的最大放电功率约束（不超过容量的50%）
    S_1(1) == 0.3*Ubat, % 储电设备的初始容量（容量的30%）
    S_1(24) == S_1(1),  % 始末状态守恒约束（首末时刻容量相等）
    B_ES1_cha+B_ES1_dis<=1, % 充放状态唯一（不能同时充放电）
    0.2*Ubat<=S_1<=0.9*Ubat, % 储能容量上下限约束（20%-90%容量范围）
    S_1(2:24)==S_1(1:23)+0.95*P_ES1_cha(2:24)-P_ES1_dis(2:24)/0.95 % 储能容量变化约束（考虑充放电效率）
    ];

%% 氢储能系统约束
UH2 = 1500; % 氢储能容量（kWh）
P_H2_cha = sdpvar(1,24); % 氢储能充电功率（储氢功率）
P_H2_dis = sdpvar(1,24); % 氢储能放电功率（释氢功率）
S_1_H2 = sdpvar(1,24); % 氢储能实时容量状态（24小时）

% 氢储能充放电标志二进制变量
B_H2_cha = binvar(1,24); % 氢储能充电标志
B_H2_dis = binvar(1,24); % 氢储能放电标志

C = [C,
    0<=P_H2_cha<=B_H2_cha*0.5*UH2, % 储氢设备的最大充电功率约束
    0<=P_H2_dis<=B_H2_dis*0.5*UH2, % 储氢设备的最大放电功率约束
    S_1_H2(1) == 0.3*UH2, % 储氢设备的初始容量（容量的30%）
    S_1_H2(24) == S_1_H2(1), % 始末状态守恒约束
    B_H2_cha+B_H2_dis<=1, % 氢储能充放电状态唯一
    0.2*UH2<=S_1_H2<=0.8*UH2, % 氢储能容量上下限约束（20%-80%）
    S_1_H2(2:24)==S_1_H2(1:23)+0.95*P_H2_cha(2:24)-P_H2_dis(2:24)/0.95, % 氢储能容量变化约束
    ];

%% 功率平衡约束
C = [C,
    P_DG+P_PV == Pload+P_PEM_E+P_ES1_cha-P_ES1_dis, % 电功率平衡约束：风光出力=电负荷+PEM耗电+储能充电-储能放电
    P_PEM_H2 == Hload+P_H2_cha - P_H2_dis % 氢功率平衡约束：PEM产氢=氢负荷+储氢充电-储氢放电
    ];

%% 目标函数构建
% 成本最小化目标：包括风光发电成本、PEM运行成本、储能运行成本
Cost = 0;
for t = 1:24
    % 各项成本系数：风电100，光伏80，PEM耗电212，PEM制氢-300（收益），储能运行40，氢储能运行60
    Cost = Cost+100*P_DG(t)+80*P_PV(t)+212*P_PEM_E-300*P_PEM_H2+40*(P_ES1_cha(t)+P_ES1_dis(t))+60*(P_H2_cha(t)+P_H2_dis(t));   
end

%% 优化求解
ops = sdpsettings('solver','gurobi','verbose',4,'debug',1); % 设置求解器参数
optimize(C,Cost,ops); % 求解优化问题
double(Cost) % 显示目标函数数值
Cost = value(Cost); % 获取目标函数最优值
fprintf('总成本') % 输出总成本
sum(Cost)

%% 结果可视化
% 电功率平衡图：显示各电功率分量的堆叠柱状图
figure;
bar([-P_PEM_E',P_DG',P_PV',-P_ES1_cha',P_ES1_dis',-Pload'],'stack') 
legend('电解槽耗电','风实际出力','光伏实际出力','储能充电','储能放电','电负荷');
xlabel('时刻（t）');
ylabel('功率（kW）');

% 氢功率平衡图：显示氢功率各分量的堆叠柱状图
figure;
bar([P_PEM_H2',-P_H2_cha',P_H2_dis',-Hload'],'stack')  
legend('电解槽制氢','储氢存氢','储氢放氢','氢负荷') 
xlabel('时刻（t）');
ylabel('功率（kW）');

% 风电实际出力图
figure
aa = value([P_DG]);
bar(aa',1,'stack')
legend('风实际出力');
xlabel('时刻（t）');
ylabel('功率（kW）');

% 光伏实际出力图
figure
aa = value([P_PV]);
bar(aa',1,'stack')
legend('光实际出力');
xlabel('时刻（t）');
ylabel('功率（kW）');

% 电储能容量变化图
figure
ee = value([S_1]);
bar(ee',1,'stack')
legend('储电容量');
xlabel('时刻（t）');
ylabel('功率（kW）');

% 氢储能容量变化图
figure
ee = value([S_1_H2]);
bar(ee',1,'stack')
legend('储氢容量');
xlabel('时刻（t）');
ylabel('功率（kW）');

% 风电利用率图
figure
s = value([P_DG./P_DG_max]);
plot(s,'g-*','LineWidth',2)
legend('风电利用率');  
xlabel('时刻（t）');
ylabel('功率(kW)');

% 光伏利用率图
figure
s = value([P_PV./P_PV_max]);
plot(s,'g-*','LineWidth',2)
legend('光伏利用率');
xlabel('时刻（t）');
ylabel('功率（kW）');

% 获取各状态变量的最优值
L = value(L);
S = value(S);
I = value(I);
R = value(R);
V = value(V);
Y = value(Y);
W = value(W);








